// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Query to procedure
type Query struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_7124edb559e00300, []int{0}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Query) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Message contains ID in uuid format and text.
type Message struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ts                   *Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Text                 string     `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_7124edb559e00300, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetTs() *Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Timestamp for reporting.
type Timestamp struct {
	Seconds              int64    `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos                int32    `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_7124edb559e00300, []int{2}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timestamp.Unmarshal(m, b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
}
func (dst *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(dst, src)
}
func (m *Timestamp) XXX_Size() int {
	return xxx_messageInfo_Timestamp.Size(m)
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

type Status struct {
	Status               string     `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Ts                   *Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_7124edb559e00300, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Status) GetTs() *Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func init() {
	proto.RegisterType((*Query)(nil), "api.Query")
	proto.RegisterType((*Message)(nil), "api.Message")
	proto.RegisterType((*Timestamp)(nil), "api.Timestamp")
	proto.RegisterType((*Status)(nil), "api.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// GetMessage asks Chains to generate new random message and send it
	// to the client.
	GetMessage(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Message, error)
	// AskStatus asks server about its status.
	AskStatus(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Status, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetMessage(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.API/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AskStatus(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/api.API/AskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// GetMessage asks Chains to generate new random message and send it
	// to the client.
	GetMessage(context.Context, *Query) (*Message, error)
	// AskStatus asks server about its status.
	AskStatus(context.Context, *Query) (*Status, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetMessage(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/AskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AskStatus(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _API_GetMessage_Handler,
		},
		{
			MethodName: "AskStatus",
			Handler:    _API_AskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_msg_7124edb559e00300) }

var fileDescriptor_msg_7124edb559e00300 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xbf, 0x4b, 0x03, 0x41,
	0x10, 0x85, 0x93, 0x5d, 0x2f, 0xe1, 0x5e, 0x24, 0xc8, 0x20, 0x72, 0x58, 0x88, 0x6c, 0x21, 0xb1,
	0xb9, 0x22, 0x96, 0x36, 0xa6, 0x12, 0x8b, 0x80, 0x9e, 0x82, 0xf5, 0xea, 0x2d, 0xc7, 0x22, 0xf7,
	0x83, 0xcc, 0x04, 0xf4, 0xbf, 0x17, 0xe7, 0xee, 0x44, 0xb0, 0x48, 0xf7, 0xcd, 0xcc, 0xb7, 0x8f,
	0xd9, 0x41, 0x5a, 0x73, 0x95, 0x77, 0xbb, 0x56, 0x5a, 0xb2, 0xbe, 0x8b, 0xee, 0x1a, 0xc9, 0xd3,
	0x3e, 0xec, 0xbe, 0x68, 0x09, 0x13, 0xcb, 0x6c, 0x7a, 0x39, 0x5d, 0xa5, 0x85, 0x89, 0x25, 0x9d,
	0xc0, 0xd6, 0x5c, 0x65, 0x46, 0x1b, 0x3f, 0xe8, 0xb6, 0x98, 0x6f, 0x03, 0xb3, 0xaf, 0xc2, 0x3f,
	0xf9, 0x02, 0x46, 0x58, 0xdd, 0xc5, 0x7a, 0x99, 0xfb, 0x2e, 0xe6, 0x2f, 0xb1, 0x0e, 0x2c, 0xbe,
	0xee, 0x0a, 0x23, 0x4c, 0x84, 0x23, 0x09, 0x9f, 0x92, 0x59, 0x7d, 0xa1, 0xec, 0x6e, 0x91, 0xfe,
	0x4a, 0x94, 0x61, 0xce, 0xe1, 0xbd, 0x6d, 0x4a, 0xd6, 0x54, 0x5b, 0x8c, 0x25, 0x9d, 0x22, 0x69,
	0x7c, 0xd3, 0xf6, 0xe9, 0x49, 0xd1, 0x17, 0xee, 0x0e, 0xb3, 0x67, 0xf1, 0xb2, 0x67, 0x3a, 0x1b,
	0x69, 0x58, 0x67, 0xec, 0x1f, 0x58, 0x69, 0xfd, 0x0a, 0xbb, 0x79, 0x7c, 0xa0, 0x15, 0x70, 0x1f,
	0x64, 0xfc, 0x17, 0x54, 0xd4, 0x83, 0x9c, 0x1f, 0x2b, 0x0f, 0x13, 0x37, 0xa1, 0x2b, 0xa4, 0x1b,
	0xfe, 0x18, 0xd2, 0xff, 0x8a, 0x0b, 0xe5, 0x7e, 0xe0, 0x26, 0x6f, 0x33, 0xbd, 0xee, 0xcd, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x06, 0x4e, 0xcd, 0x6a, 0x01, 0x00, 0x00,
}
